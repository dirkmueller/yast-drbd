{
	textdomain "drbd";
	import "Label";
	import "Wizard";
	import "Drbd";

	include "drbd/helps.ycp";
	include "drbd/common.ycp";

	string disipver = "false";
	string disiohin = "false";
	string diagref = "0";
	string mc = "0";

	void global_conf_Read()
	{
		disipver = Drbd::global_config["disable-ip-verification"]:"false";
		diagref = Drbd::global_config["dialog-refresh"]:"1";
		mc = Drbd::global_config["minor-count"]:"5";
	}

	term global_conf_GetDialog ()
	{
		return `VBox(
				`Frame(_("Global Configuration of DRBD"),
					`HBox(
						`VBox(
							`Left(`IntField(`id("MinorCount"), _("Minor Count"), 1, 20, tointeger(mc))),
							`Left(`IntField(`id("DialogRefresh"), _("Dialog Refresh"), 0, 1000, tointeger(diagref))),
							`Left(`CheckBox(`id("DisableIpVerification"), `opt(`notify), _("Disable IP Verification"), disipver=="true"))
							))), `VStretch()
				);
	}

	boolean global_conf_Write ()
	{
		disipver = (boolean)UI::QueryWidget(`id("DisableIpVerification"), `Value) ? "true" : nil;
		diagref  = sformat("%1", UI::QueryWidget(`id("DialogRefresh"), `Value));
		mc       = sformat("%1", UI::QueryWidget(`id("MinorCount"), `Value));

		Drbd::global_config["disable-ip-verification"] = disipver;
		Drbd::global_config["dialog-refresh"] = diagref;
		Drbd::global_config["minor-count"] = mc;

		Drbd::modified = true;

		return true;
	}

	any ConfigureGlobalDialog () {

		global_conf_Read();

		my_SetContents("global_conf", global_conf_GetDialog());

		any ret = nil;
		while(true) {

			Wizard::SelectTreeItem("global_conf");

			ret = UI::UserInput();

			if (ret == `help) {
				myHelp("global_conf");
				continue;
			}

			if (ret == `wizardTree) {
				ret = (string)UI::QueryWidget (`id (`wizardTree), `CurrentItem);
			}

			if (ret=="DialogRefresh" || ret=="MinorCount" || ret=="DisableIpVerification" ) {
				continue;
			}

			if (ret == `abort || ret == `cancel) {
				if (ReallyAbort()) return ret;
				else continue;
			}

			if (ret == `next || ret == `back || contains(DIALOG, tostring(ret))) {

				if (!global_conf_Write()) continue;

				if (ret != `next && ret != `back)
					ret = symbolof(toterm(ret));

				break;
			}

		}
		return ret;
	}
}

