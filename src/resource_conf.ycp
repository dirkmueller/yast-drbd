/**
 */

{

textdomain "drbd";

import "Popup";
import "Sequencer";
import "Report";
import "Label";
import "Wizard";
import "Service";
import "Drbd";

include "drbd/helps.ycp";
include "drbd/common.ycp";


term res_list_get_dialog ()
{
	list <term>  table_items = [];

	foreach (string resname, map<string, any> resconfig, (map<string, map<string, any> >) Drbd::resource_config,
	{
		if (Drbd::resource_config[resname]:nil == nil)
			continue;
		term items = `item(`id(resname));
		items = add(items, resname);

		foreach (string nodename, any nodeconfig, resconfig["on"]:$[],
		{
			items = add(items, nodename);
		});

		table_items = add(table_items, items);

		return 0;
	});

	return `VBox(
				`opt(`hvstretch),
				`VBox( `opt(`hvstretch),
					`Table(`id(`res_list_table), `header("Resource      ", "Node-1       ", "Node-2       "), table_items)
				),
				`Left(`HBox( 
					`PushButton(`id(`add),  "Add"),
					`PushButton(`id(`edit), "Edit"),
					`PushButton(`id(`delete), "Delete")
				))
			);
}

boolean resource_conf_Write ()
{
	return true;
}

any ResListDialog () {

	my_SetContents("resource_conf", res_list_get_dialog());

	any ret = nil;
	while(true) {

		Wizard::SelectTreeItem("resource_conf");

		ret = UI::UserInput();

		y2debug("on ResListDialog(), UserInput ret=%1", ret);

		if (ret == `help) {
			myHelp("global_conf");
			continue;
		}

		if (ret == `wizardTree) {
			ret = (string)UI::QueryWidget (`id (`wizardTree), `CurrentItem);
		}

		if (ret=="resource_conf" || ret=="DialogRefresh" || ret=="MinorCount" || ret=="DisableIpVerification" ) {
			continue;
		}

		if (ret == `delete)
		{
			string resname = (string) UI::QueryWidget(`id(`res_list_table), `CurrentItem);
			Drbd::resource_config[sformat("%1", resname)] = nil;
			ret = `list;
			break;
		}

		if (ret == `abort || ret == `cancel) {
			if (ReallyAbort()) return ret;
			else continue;
		}

		if (ret == `next || ret == `back || ret == `edit || ret == `add || contains(DIALOG, tostring(ret))) {

			if (!resource_conf_Write()) continue;

			if (ret != `next && ret != `back && ret !=`edit && ret != `add)
				ret = symbolof(toterm(ret));

			break;
		}

	}
	return ret;
}

term res_basic_config_get_dialog(map<string, any> res_config)
{
	list<string> node_name = [];

	foreach (string name, any val, res_config["on"]:$[],
	{
		node_name = add(node_name, name);
	});

	return `VBox(
				`TextEntry(`id(`resname), _("Resource Name"), res_config["resname"]:""),
				`Frame(
					"Nodes Configurations",
					`HBox(
						`MarginBox(1, 1, `Frame( "Node 1",
							`VBox(
								`TextEntry(`id(`n1_name), "Name", node_name[0]:""),
								`TextEntry(`id(`n1_addr), "Address:Port", res_config["on", node_name[0]:"", "address"]:""),
								`TextEntry(`id(`n1_devc), "Device",    res_config["on", node_name[0]:"", "device"]:""),
								`TextEntry(`id(`n1_disk), "Disk",      res_config["on", node_name[0]:"", "disk"]:""),
								`TextEntry(`id(`n1_meta), "Meta-disk", res_config["on", node_name[0]:"", "meta-disk"]:"internal")
							)
						)),
						`MarginBox(1, 1, `Frame( "Node 2",
							`VBox(
								`TextEntry(`id(`n2_name), "Name", node_name[1]:""),
								`TextEntry(`id(`n2_addr), "Address:Port", res_config["on", node_name[1]:"", "address"]:""),
								`TextEntry(`id(`n2_devc), "Device",    res_config["on", node_name[1]:"", "device"]:""),
								`TextEntry(`id(`n2_disk), "Disk",      res_config["on", node_name[1]:"", "disk"]:""),
								`TextEntry(`id(`n2_meta), "Meta-disk", res_config["on", node_name[1]:"", "meta-disk"]:"internal")
							)
						))
					)
				),
				`VStretch(),
				`Bottom(
					`HBox(
						`PushButton(`id(`advance), "Advance Config"),
						`PushButton(`id(`cancel_inner),  "Cancel"),
						`PushButton(`id(`ok), "OK")
					)
				)
			);
}


map<string, any> save_basic_config(map<string, any> res_config)
{
	if (UI::QueryWidget(`id(`resname), `Value) == nil)
		return res_config;

	res_config["resname"] = (string) UI::QueryWidget(`id(`resname), `Value);
	res_config["on"] = $[
		(string) UI::QueryWidget(`id(`n1_name), `Value) : $[
			"address"   : (string) UI::QueryWidget(`id(`n1_addr), `Value),
			"device"    : (string) UI::QueryWidget(`id(`n1_devc), `Value),
			"disk"      : (string) UI::QueryWidget(`id(`n1_disk), `Value),
			"meta-disk" : (string) UI::QueryWidget(`id(`n1_meta), `Value)
		],
		(string) UI::QueryWidget(`id(`n2_name), `Value) : $[
			"address"   : (string) UI::QueryWidget(`id(`n2_addr), `Value),
			"device"    : (string) UI::QueryWidget(`id(`n2_devc), `Value),
			"disk"      : (string) UI::QueryWidget(`id(`n2_disk), `Value),
			"meta-disk" : (string) UI::QueryWidget(`id(`n2_meta), `Value)
		]
	];

	return res_config;
}


term res_advance_config_get_dialog(map<string, any> res_config)
{
	return `VBox(
				`HBox(
					`ComboBox(`id(`protocol), _("Protocol"), ["A", "B", "C"]),
					`HSpacing()
				),
				`Frame(
					"Startup",
					`HBox(
						`TextEntry(`id(`wfc_timeout), "wfc-timeout", res_config["wfc-timeout"]:""),
						`TextEntry(`id(`degr_wfc_timeout), "degr-wfc-timeout", res_config["degr-wfc-timeout"]:"")
					)
				),
				`Frame(
					"Disk",
					`HBox(
						`ComboBox(`id(`on_io_error), "on-io-error", ["detach", "panic", "pass_on"]),
						`HSpacing(),
						`TextEntry(`id(`size), "size", res_config["disk_s", "size"]:"")
					)
				),
				`Frame(
					"Net",
					`VBox(
						`HBox(
							`TextEntry(`id(`sndbuf_size), "sndbuf-size", res_config["net", "sndbuf-size"]:""),
							`TextEntry(`id(`max_buffers), "max-buffers", res_config["net", "max-buffers"]:"")
						),
						`HBox(
							`TextEntry(`id(`timeout), "timeout", res_config["net", "timeout"]:""),
							`TextEntry(`id(`connect_int), "connect-int", res_config["net", "connect-int"]:""),
							`TextEntry(`id(`ping_int), "ping-int", res_config["net", "ping-int"]:"")
						),
						`HBox(
							`TextEntry(`id(`max_epoch_size), "max-epoch-size", res_config["net", "max-epoch-size"]:""),
							`TextEntry(`id(`ko_count), "ko-count", res_config["net", "ko-count"]:"")
						)
					)
				),
				`Frame(
					"Syncer",
					`HBox(
						`TextEntry(`id(`rate),       "Rate",       res_config["syncer", "rate"]:""),
						`TextEntry(`id(`al_extents), "Al-extents", res_config["syncer", "al-extents"]:"")
					)
				),
				`VStretch(),
				`Bottom(
					`HBox(
						`PushButton(`id(`basic), "Basic Config"),
						`PushButton(`id(`cancel_inner),  "Cancel"),
						`PushButton(`id(`ok), "OK")
					)
				)
			);
}

map<string, any> save_advance_config(map<string, any> res_config)
{
	if (UI::QueryWidget(`id(`protocol), `Value) == nil)
	{
		if (res_config["protocol"]:nil == nil) res_config["protocol"] = "C";
		if (res_config["disk_s", "on-io-error"]:nil == nil) res_config["disk_s"] = $["on-io-error" : "pass_on"];
		return res_config;
	}


	res_config["protocol"] = (string) UI::QueryWidget(`id(`protocol), `Value);

	res_config["startup"] = $[
		"wfc-timeout" : (string) UI::QueryWidget(`id(`wfc_timeout), `Value),
		"degr-wfc-timeout"        : (string) UI::QueryWidget(`id(`degr_wfc_timeout), `Value)
	];

	res_config["disk_s"] = $[
		"on-io-error" : (string) UI::QueryWidget(`id(`on_io_error), `Value),
		"size"        : (string) UI::QueryWidget(`id(`size), `Value)
	];

	res_config["net"] = $[
		"ndbuf-size" : (string) UI::QueryWidget(`id(`sndbuf_size), `Value),
		"timeout" : (string) UI::QueryWidget(`id(`timeout), `Value),
		"connect-int" : (string) UI::QueryWidget(`id(`connect_int), `Value),
		"ping-int" : (string) UI::QueryWidget(`id(`ping_int), `Value),
		"max-buffers" : (string) UI::QueryWidget(`id(`max_buffers), `Value),
		"max-epoch-size" : (string) UI::QueryWidget(`id(`max_epoch_size), `Value),
		"ko-count" : (string) UI::QueryWidget(`id(`ko_count), `Value),
	];

	res_config["syncer"] = $[
		"al-extents" : (string) UI::QueryWidget(`id(`al_extents), `Value),
		"rate"       : (string) UI::QueryWidget(`id(`rate), `Value)
	];

		y2debug("ret = %1", res_config);
	return res_config;
}


map del_empty_item(map old_map)
{
	map new_map = old_map;
	foreach (string key, any val, (map<string, any>) old_map,
	{
		if (is(val, map))
		{
			new_map[key] = del_empty_item((map)val);
		} else
		{
			if (size((string)val) == 0)
				new_map[key] = nil;
		}
	});

	return new_map;
}


any ResDialog(string resname)
{
	any ret = nil;
	symbol cur_page = `basic;
	map<string, any> res_config = Drbd::resource_config[resname]:$[];
	res_config["resname"] = resname;

	my_SetContents("resource_conf", res_basic_config_get_dialog(res_config));

	Wizard::DisableNextButton();
	Wizard::DisableAbortButton();

	while (true)
	{
		Wizard::SelectTreeItem("resource_conf");
		ret = UI::UserInput();

		y2debug("in ResDialog(), UserInput ret=%1", ret);

		if (ret == `help) {
			myHelp("global_conf");
			continue;
		}

		if (ret == `wizardTree) {
			continue;
			ret = (string)UI::QueryWidget (`id (`wizardTree), `CurrentItem);
		}

		if (contains(DIALOG, tostring(ret)))
		{
			continue;
		}


		if (ret == `advance || (ret == `ok && cur_page == `basic))
		{
			if ((string)UI::QueryWidget(`id(`n1_name), `Value) == (string)UI::QueryWidget(`id(`n2_name), `Value))
			{
				Popup::Warning(_("Node names must be different."));
				ret = nil;
				continue;
             }

            foreach (symbol the_id, [`resname, `n1_addr, `n1_name, `n1_devc, `n1_disk, `n1_meta, `n2_name, `n2_addr, `n2_devc, `n2_disk, `n2_meta],
            {
                string str = (string) UI::QueryWidget(`id(the_id), `Value);
                if (str == nil || size(str) == 0)
                {
                    Popup::Warning(_("Fill out all fields."));
					ret = nil;
					break;
                }
            });
			if (ret == nil)
				continue;
		}

		if (ret == `advance)
		{
			cur_page = `advance;

			res_config = save_basic_config(res_config);
			y2debug("res_config = %1", res_config);

			my_SetContents("resource_conf", res_advance_config_get_dialog(res_config));

			UI::ChangeWidget(`id(`protocol), `Value, res_config["protocol"]:"C");
			UI::ChangeWidget(`id(`on_io_error), `Value, res_config["disk_s", "on-io-error"]:"pass_on");

			Wizard::DisableNextButton();
			Wizard::DisableAbortButton();

			continue;
		}

		if (ret == `basic)
		{
			cur_page = `basic;

			res_config = save_advance_config(res_config);
			my_SetContents("resource_conf", res_basic_config_get_dialog(res_config));

			Wizard::DisableNextButton();
			Wizard::DisableAbortButton();

			continue;
		}

		if (ret == `cancel_inner)
		{
			break;
		}

		if (ret == `ok)
		{
			res_config = save_basic_config(res_config);
			res_config = save_advance_config(res_config);

			y2debug("res_config=%1", res_config);

			if (size(resname) > 0)
			{	//edit
				Drbd::resource_config = remove(Drbd::resource_config, resname);
				Drbd::resource_config[resname]=nil;
				resname = res_config["resname"]:"";
				y2debug("resname=%1", resname);
				if (size(resname) > 0)
				{
					res_config = remove(res_config, "resname");
					Drbd::resource_config[resname] = res_config;
					y2debug("new resname = %1", resname);
					y2debug("mcdebug drbd::resource_config = %1", Drbd::resource_config);
				}
			} else
			{	//add
				y2debug("add new resouce");
				resname = res_config["resname"]:"";
				if (size(resname) > 0)
				{
					res_config = remove(res_config, "resname");
					Drbd::resource_config[resname] = res_config;
				}
			}
			break;
		}

	}

	Wizard::EnableNextButton();
	Wizard::EnableAbortButton();
	return ret;
}


any ResAddDialog()
{
	any ret = nil;
	ret =  ResDialog("");
	return ret;
}


any ResEditDialog()
{
	any ret = nil;
	string resname = (string) UI::QueryWidget(`id(`res_list_table), `CurrentItem);
	ret = ResDialog(resname);

	return ret;
}


any ResourceSequence()
{
    map aliases = $[
        "list"  : ``(ResListDialog()),
        "add"   : ``(ResAddDialog()),
		"edit"  : ``(ResEditDialog())
	];

    map sequence = $[
        "ws_start" : "list",
        "list"	: $[
			`startup_conf :  `startup_conf,
			`global_conf  :  `global_conf,
			`add	: "add",
			`edit	: "edit",
			`list	: "list",
            `abort  : `abort,
            `next   : `next
		],
        "add"	: $[
            `abort  : `abort,
            `ok     : "list",
            `cancel_inner : "list"
		],
        "edit"	: $[
            `ok     : "list",
            `abort  : `abort,
            `cancel_inner : "list"
		],
	];

    any ret = Sequencer::Run(aliases, sequence);

    return ret;
}

/* EOF */
}
