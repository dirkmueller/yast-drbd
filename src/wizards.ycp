/* ------------------------------------------------------------------------------
 * Copyright (c) 2006 Novell, Inc. All Rights Reserved.
 *
 *
 * This program is free software; you can redistribute it and/or modify it under
 * the terms of version 2 of the GNU General Public License as published by the
 * Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with
 * this program; if not, contact Novell, Inc.
 *
 * To contact Novell about this file by physical or electronic mail, you may find
 * current contact information at www.novell.com.
 * ------------------------------------------------------------------------------
 */

/**
 * File:	include/drbd/wizards.ycp
 * Package:	Configuration of drbd
 * Summary:	Wizards definitions
 * Authors:	xwhu <xwhu@novell.com>
 *
 * $Id: wizards.ycp 27914 2006-02-13 14:32:08Z locilka $
 */

{

textdomain "drbd";

import "Sequencer";
import "Wizard";

include "drbd/complex.ycp";
include "drbd/dialogs.ycp";
include "drbd/startup_conf.ycp";
include "drbd/global_conf.ycp";
include "drbd/resource_conf.ycp";


any TabSequence()
{
	map Aliases = $[
	    "startup_conf":  ``(ConfigureStartUpDialog()),
	    "global_conf":   ``(ConfigureGlobalDialog()),
	    "resource_conf": ``(ResourceSequence())
	];

    map anywhere = $[ `abort:`abort, `next:`next ];
    foreach(string key, DIALOG, { anywhere = add(anywhere, symbolof(toterm(key)), key); });

    map sequence = $[ "ws_start" : DIALOG[0]:"" ];
    foreach(string key, DIALOG, { sequence = add(sequence, key, anywhere); });

    // UI initialization
    Wizard::OpenTreeNextBackDialog();

    list<map> tree = [];
    foreach(string key, DIALOG,
	{
        tree = Wizard::AddTreeItem( tree, PARENT[key]:"",  NAME[key]:"", key);
	});

    Wizard::CreateTree(tree, "DRBD");

    // Buttons redefinition
    Wizard::SetNextButton(`next, Label::FinishButton());

    if (UI::WidgetExists(`id(`wizardTree))) {
        Wizard::SetBackButton(`help_button, Label::HelpButton());
        Wizard::SetAbortButton(`abort, Label::CancelButton());
    } else {
        UI::WizardCommand(`SetNextButtonLabel( Label::FinishButton() ) );
        UI::WizardCommand(`SetAbortButtonLabel( Label::CancelButton() ) );
        Wizard::HideBackButton();
    }

    Wizard::SelectTreeItem(sequence["ws_start"]:"");

    any ret = Sequencer::Run(Aliases, sequence);
    return ret;
}

any MainSequence() {
    /*
       if (Heartbeat::firstrun) {
       return FirstRunSequence();
       } else {
       return TabSequence();
       }
     */
    return TabSequence();

}

any DrbdSequence() {

    map aliases = $[
        "read"  : [ ``( ReadDialog() ), true ],
        "main"  : ``( MainSequence() ),
        "write" : [ ``( WriteDialog() ), true ]
	];

    map sequence = $[
        "ws_start" : "read",
        "read" : $[
            `abort  : `abort,
            `next   : "main"
		],
        "main" : $[
            `abort  : `abort,
            `next   : "write"
		],
        "write" : $[
            `abort  : `abort,
            `next   : `next
		]
	];

    Wizard::CreateDialog();

    any ret = Sequencer::Run(aliases, sequence);

    UI::CloseDialog();
    return ret;
}

/**
 * Whole configuration of heartbeat but without reading and writing.
 * For use with autoinstallation.
 * @return sequence result
 */
any DrbdAutoSequence() {

    /* Initialization dialog caption */
    string caption = _("Heartbeat Configuration");
    /* Initialization dialog contents */
    term contents = `Label(_("Initializing..."));

    Wizard::CreateDialog();
    Wizard::SetContentsButtons(caption, contents, "",
            Label::BackButton(), Label::NextButton());

    any ret = TabSequence();

    UI::CloseDialog();
    return ret;
}

}
